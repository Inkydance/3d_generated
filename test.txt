Traceback (most recent call last):
  File "C:\users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_comm.py", line 1194, in internal_evaluate_expression_json
    pydevd_vars.evaluate_expression(py_db, frame, expression, is_exec=True)
  File "C:\Users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_vars.py", line 370, in new_func
    return _run_with_unblock_threads(original_func, py_db, curr_thread, frame, expression, is_exec)
  File "C:\Users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_vars.py", line 334, in _run_with_unblock_threads
    return _run_with_interrupt_thread(original_func, py_db, curr_thread, frame, expression, is_exec)
  File "C:\Users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_vars.py", line 305, in _run_with_interrupt_thread
    return original_func(py_db, frame, expression, is_exec)
  File "C:\Users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_vars.py", line 544, in evaluate_expression
    compiled = _compile_as_exec(expression)
  File "C:\Users\Users\AppData\Roaming\Python\Python310\site-packages\debugpy\_vendored\pydevd\_pydevd_bundle\pydevd_vars.py", line 412, in _compile_as_exec
    return compile(expression_to_evaluate, '<string>', 'exec', _ASYNC_COMPILE_FLAGS)
  File "<string>", line 1
    blender.exe --background --python blender.py -- "C:/Users/Users/Desktop/vr_app/vr_app/vrapp-server/glb_file/my_model.glb"
                                      ^^^^^^^
SyntaxError: invalid syntax


実行するタスク: c:\Program Files\Blender Foundation\Blender 3.5\blender.exe --python c:\Users\user\.vscode\extensions\jacqueslucke.blender-development-0.0.18\pythonFiles\launch.py 
実行するスクリプト　C:\Users\user\Desktop\vr_app\vr_app\vrapp-server\blender\blender.py



Read prefs: C:\Users\user\AppData\Roaming\Blender Foundation\Blender\3.5\config\userpref.blend
繧ｨ繝ｩ繝ｼ: Python: Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "c:/Users/user/.vscode/extensions/jacqueslucke.blender-development-0.0.18/pythonFiles/launch.py", line 11, in <module>
    print(json.loads(os.environ['ADDONS_TO_LOAD']))
  File "c:\Program Files\Blender Foundation\Blender 3.5\3.5\python\lib\os.py", line 680, in __getitem__
    raise KeyError(key) from None
KeyError: 'ADDONS_TO_LOAD'
繧ｨ繝ｩ繝ｼ: 譛ｪ蟇ｾ蠢懊・繝輔ぃ繧､繝ｫ繝輔か繝ｼ繝槭ャ繝医〒縺・縲靴:\Users\user\Desktop\vr_app\vr_app\vrapp-server\blender\blender.py縲
Error: argument has no '.blend' file extension, not using as new file, exiting! C:\Users\user\Desktop\vr_app\vr_app\vrapp-server\blender\blender.py
Saved session recovery to 'C:\Users\user\AppData\Local\Temp\quit.blend'

Blender quit









固まるがほぼ成功
import os
import time
import bpy

file_path = 'C:/Users/user/Desktop/vr_app/vr_app/vrapp-server/glb_file/my_model.txt'
last_modified = 0
glb_file_path = ''

while True:
    modified = os.path.getmtime(file_path)
    if modified > last_modified:
        # ファイルの内容が変更された場合の処理
        with open(file_path, 'r') as file:
            contents = file.read()
        print('File contents:', contents)
        glb_file_path = contents
            # オブジェクトをインポートする前にファイルの存在を確認する
        if os.path.exists(glb_file_path):
            bpy.ops.import_scene.gltf(filepath=glb_file_path)
        else:
            print("指定されたファイルが存在しません。")
        # bpy.ops.import_scene.gltf(filepath=glb_file_path)

        # インポートされたオブジェクトを選択
        imported_objects = [obj for obj in bpy.context.selected_objects if obj.type == 'MESH']

        # インポートされたオブジェクトをアクティブにする
        if imported_objects:
            bpy.context.view_layer.objects.active = imported_objects[0]

        # オブジェクトを選択状態にする
        for obj in imported_objects:
            obj.select_set(True)

        # カメラを設定
        bpy.ops.object.camera_add(location=(0, -5, 2))
        camera = bpy.context.object
        bpy.context.scene.camera = camera

        # レンダリング設定
        bpy.context.scene.render.image_settings.file_format = 'PNG'
        bpy.context.scene.render.filepath = "C:/Users/user/Desktop/vr_app/render.png"

        # レンダリング実行
        bpy.ops.render.render(write_still=True)



        last_modified = modified
    time.sleep(1)  # チェック間隔（秒）



# 以下の部分はインポートしたオブジェクトの設定やレンダリングの処理です。
# 必要に応じて修正してください。


# # オブジェクトをインポートする前にファイルの存在を確認する
# if os.path.exists(file_path):
#     bpy.ops.import_scene.gltf(filepath=file_path)
# else:
#     print("指定されたファイルが存在しません。")

# 新しいシーンを作成
# bpy.ops.scene.new(type='NEW')




import os
from flask import Flask, request
from flask_cors import CORS
from gradio_client import Client

app = Flask(__name__)

CORS(app)

@app.route('/', methods=['POST'])
def index():
    prompt = request.json.get('prompt') # 2 フロントエンドから受信したデータ
    
    print(prompt)
    client = Client("https://hysts-shap-e.hf.space/")
    result = client.predict(
        prompt,
        0,
        15,
        64,
        api_name="/text-to-3d"
    )
    print(result)
    glb_file_path = result
    file_path = "C:/Users/user/Desktop/vr_app/vr_app/vrapp-server/glb_file/my_model.txt"  # 保存先のディレクトリとファイル名を指定

    with open(file_path, "w") as f:
        f.write(glb_file_path)




    return {"glb_file_path": glb_file_path}

if __name__ == '__main__':
    app.run()







127.0.0.1 - - [19/Jun/2023 08:12:32] "OPTIONS / HTTP/1.1" 200 -None
Loaded as API: https://hysts-shap-e.hf.space/ ✔
C:\Users\user\AppData\Local\Temp\e671e1c3feeb61177d01b2334f3c357138d44f34\tmp2pj3tuz7.glb
127.0.0.1 - - [19/Jun/2023 08:12:56] "POST / HTTP/1.1" 200 -
127.0.0.1 - - [19/Jun/2023 08:17:29] "OPTIONS / HTTP/1.1" 200 -None




Got GET: {'type': 'ping'}
127.0.0.1 - - [19/Jun/2023 08:59:19] "GET / HTTP/1.1" 200 -    
Got POST: {'type': 'script', 'path': 'c:\\Users\\user\\Desktop\\vr_app\\vr_app\\vrapp-server\\blender\\blender.py'}       
127.0.0.1 - - [19/Jun/2023 08:59:19] "POST / HTTP/1.1" 200 -   
File contents: C:\Users\user\AppData\Local\Temp\1449aafd3ea2109d56fe04a2c88b7eb3c505f6a7\tmpufqeo90d.glb
Data are loaded, start creating Blender stuff
glTF import finished in 0.05s
Saved: 'C:\Users\user\Desktop\vr_app\render.png'
 Time: 00:01.09 (Saving: 00:00.21)

# $ pip3 install SpeechRecognition
# $ pip3 install pyaudio
# $ pip3 install google-cloud-speech google-api-python-client oauth2client




ERROR in ./node_modules/@google-cloud/common/build/src/operation.js 24:15-30
Module not found: Error: Can't resolve 'util' in 'C:\Users\user\Desktop\vr_app\vr_app\vrapp-front\node_modules\@google-cloud\common\build\src'
Did you mean './util'?
Requests that should resolve in the current directory need to start with './'.
Requests that start with a name are treated as module requests and resolve within module directories (node_modules, C:\Users\user\Desktop\vr_app\vr_app\vrapp-front\node_modules).
If changing the source code is not an option there is also a resolve options called 'preferRelative' which tries to resolve these kind of requests in the current directory too.

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "util": require.resolve("util/") }'
	- install 'util'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "util": false }





ERROR in ./node_modules/@google-cloud/common/build/src/util.js 28:17-34
Module not found: Error: Can't resolve 'stream' in 'C:\Users\user\Desktop\vr_app\vr_app\vrapp-front\node_modules\@google-cloud\common\build\src'

BREAKING CHANGE: webpack < 5 used to include polyfills for node.js core modules by default.
This is no longer the case. Verify if you need this module and configure a polyfill for it.

If you want to include a polyfill, you need to:
	- add a fallback 'resolve.fallback: { "stream": require.resolve("stream-browserify") }'
	- install 'stream-browserify'
If you don't want to include a polyfill, you can use an empty module like this:
	resolve.fallback: { "stream": false }